version: '3.8'


x-airflow-common:
  &airflow-common
  image: apache/airflow:2.9.0
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__FERNET_KEY: "5wjV7NcWPsf47L-z2dMM6EAKqdZF3a2442BqrHiAdWE="
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
  volumes:
    - ./git-data/repo/data-pipelines/dags:/opt/airflow/dags
    - ./git-data/repo/data-pipelines/clickhouse_dbt:/opt/airflow/dbt
    - logs:/opt/airflow/logs 
    - ./secrets/dbt:/home/airflow/.dbt
  depends_on:
    postgres:
      condition: service_healthy
  networks:
    - default


services:
  minio:
    image: quay.io/minio/minio
    container_name: minio
    hostname: minio  
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin123) do echo 'Waiting for MinIO...' && sleep 1; done &&
      if /usr/bin/mc ls minio/clickhouse >/dev/null 2>&1; then
        echo 'Bucket clickhouse already exists';
      else
        echo 'Creating bucket clickhouse';
        /usr/bin/mc mb minio/clickhouse &&
        /usr/bin/mc policy set public minio/clickhouse;
      fi
      "
    networks:
      - default

  clickhouse:
    image: clickhouse/clickhouse-server
    container_name: clickhouse-server
    ports:
      - "8123:8123"
    environment:
      CLICKHOUSE_USER: myuser
      CLICKHOUSE_PASSWORD: mypassword
      CLICKHOUSE_DB: mydatabase
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./storage_with_s3.xml:/etc/clickhouse-server/config.d/storage_with_s3.xml
    depends_on:
      minio:
        condition: service_healthy
      create-bucket:
        condition: service_completed_successfully
    entrypoint: >
      sh -c "
      mkdir -p /var/lib/clickhouse/disks/s3_disk &&
      chown -R clickhouse:clickhouse /var/lib/clickhouse &&
      exec /entrypoint.sh
      "


  # -------------------
  # Database for Airflow
  # -------------------
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # -------------------
  # Airflow Services
  # -------------------
  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init &&
        airflow users create \
          --username admin \
          --firstname Airflow \
          --lastname Admin \
          --role Admin \
          --email admin@example.com \
          --password admin
    restart: on-failure

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    restart: always

  # -------------------
  # Git Sync (DAGs + DBT)
  # -------------------
  git-sync:
    image: k8s.gcr.io/git-sync/git-sync:v4.0.0
    restart: always
    user: "0:0"  
    volumes:
      - ./git-data:/git
    environment:
      - GIT_SYNC_REPO=https://github.com/abdullahtarek/data_engineering_project.git
      - GIT_SYNC_BRANCH=main
      - GIT_SYNC_ROOT=/git
      - GIT_SYNC_DEST=repo
      - GIT_SYNC_WAIT=60


volumes:
  clickhouse-data:
  minio_data:
  git-data:
  postgres_data:
  logs:
